name: 构建并推送Docker镜像

# 触发条件：main分支推送代码或手动触发
on:
  push:
    branches: [main]
    # 仅当以下文件修改时触发（避免无效构建）
    paths:
      - "bot.py"
      - "config.py"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/docker-build.yml"
  workflow_dispatch: # 允许手动触发

# 工作流任务
jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用Ubuntu runner（支持多架构构建）

    # 权限配置（推送镜像需要的权限）
    permissions:
      contents: read
      packages: write # 推送GHCR需要
      id-token: write # 用于镜像签名（可选）

    steps:
      # 步骤1：拉取GitHub仓库代码
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 拉取完整历史，用于生成版本标签

      # 步骤2：设置Docker构建环境（支持多架构）
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤3：登录Docker Hub（如需推送到Docker Hub，取消注释并配置 secrets）
      # - name: 登录Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 步骤3（备选）：登录GitHub Container Registry（GHCR）
      - name: 登录GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 当前GitHub用户名
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub自动生成的令牌（无需手动配置）

      # 步骤4：生成镜像标签（支持版本号+分支+SHA）
      - name: 生成镜像标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 镜像名称（替换为你的GitHub用户名/仓库名）
          images: |
            ghcr.io/${{ github.repository_owner }}/telegram-danmaku-bot
            # docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/telegram-danmaku-bot  # Docker Hub镜像名
          # 标签规则：
          # - 主分支推送 → latest标签
          # - 提交SHA → 短SHA标签（如：sha-123456）
          # - 语义化版本（如v1.0.0）→ 版本标签
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # 步骤5：构建并推送镜像（支持多架构：amd64/arm64）
      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: . # 构建上下文（当前目录）
          push: true # 推送镜像到仓库
          platforms: linux/amd64,linux/arm64 # 支持的架构（覆盖大部分设备）
          tags: ${{ steps.meta.outputs.tags }} # 使用步骤4生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 生成镜像元数据标签
          cache-from: type=gha # 使用GitHub Actions缓存（加速后续构建）
          cache-to: type=gha,mode=max # 保存缓存
